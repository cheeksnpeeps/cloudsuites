services:
  # Database Services
  postgres:
    image: postgres:17
    container_name: cloudsuites-postgres-17
    environment:
      - 'POSTGRES_DB=cloudsuites'
      - 'POSTGRES_PASSWORD=csPassw0rd'
      - 'POSTGRES_USER=csuser'
    ports:
      - "59665:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - cloudsuites-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U csuser -d cloudsuites"]
      interval: 30s
      timeout: 10s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4:8.0
    container_name: cloudsuites-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: cs@cloudsuites.com
      PGADMIN_DEFAULT_PASSWORD: cspassword
    ports:
      - "5050:80"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - cloudsuites-network

  # Redis for Rate Limiting and Caching
  redis:
    image: redis:7-alpine
    container_name: cloudsuites-redis
    ports:
      - "6379:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD:-csRedisPass123}
    volumes:
      - redis_data:/data
    networks:
      - cloudsuites-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # CloudSuites Application (Spring Boot + React)
  cloudsuites-app:
    build: .
    ports:
      - "8080:8080"
    environment:
      # Profile Management
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE}
      
      # Database Configuration (Primary JDBC)
      - SPRING_DATASOURCE_URL=jdbc:postgresql://${DB_HOST}:${DB_PORT}/${DB_NAME}
      - SPRING_DATASOURCE_USERNAME=${DB_USERNAME}
      - SPRING_DATASOURCE_PASSWORD=${DB_PASSWORD}
      
      # Database Configuration (R2DBC Reactive)
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      
      # R2DBC Pool Configuration
      - SPRING_R2DBC_POOL_INITIAL_SIZE=${SPRING_R2DBC_POOL_INITIAL_SIZE}
      - SPRING_R2DBC_POOL_MAX_SIZE=${SPRING_R2DBC_POOL_MAX_SIZE}
      
      # Auth0 Configuration
      - AUTH0_AUDIENCE=${AUTH0_AUDIENCE}
      - AUTH0_ISSUER_URI=${AUTH0_ISSUER_URI}
      
      # CORS Configuration
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
      
      # JWT Configuration
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_ACCESS_TOKEN_VALIDITY_MS=${JWT_ACCESS_TOKEN_VALIDITY_MS}
      - JWT_REFRESH_TOKEN_VALIDITY_MS=${JWT_REFRESH_TOKEN_VALIDITY_MS}
      
      # Twilio Configuration
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_SERVICE_SID=${TWILIO_SERVICE_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
      - TWILIO_PHONE_NUMBER=${TWILIO_PHONE_NUMBER}
      
      # Server Configuration
      - SERVER_PORT=${SERVER_PORT}
      
      # Redis Configuration (Rate Limiting & Caching)
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_DATABASE=${REDIS_DATABASE}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_TIMEOUT=${REDIS_TIMEOUT}
      - REDIS_POOL_MAX_ACTIVE=${REDIS_POOL_MAX_ACTIVE}
      - REDIS_POOL_MAX_IDLE=${REDIS_POOL_MAX_IDLE}
      - REDIS_POOL_MIN_IDLE=${REDIS_POOL_MIN_IDLE}
      - REDIS_POOL_MAX_WAIT=${REDIS_POOL_MAX_WAIT}
      
      # Rate Limiting Configuration
      - RATE_LIMITING_ENABLED=${RATE_LIMITING_ENABLED}
      - RATE_LIMITING_REDIS_ENABLED=${RATE_LIMITING_REDIS_ENABLED}
      - RATE_LIMIT_LOGIN_ATTEMPTS=${RATE_LIMIT_LOGIN_ATTEMPTS}
      - RATE_LIMIT_LOGIN_WINDOW_MINUTES=${RATE_LIMIT_LOGIN_WINDOW_MINUTES}
      - RATE_LIMIT_LOGIN_ENABLE_LOCKOUT=${RATE_LIMIT_LOGIN_ENABLE_LOCKOUT}
      - RATE_LIMIT_OTP_SEND_ATTEMPTS=${RATE_LIMIT_OTP_SEND_ATTEMPTS}
      - RATE_LIMIT_OTP_VERIFY_ATTEMPTS=${RATE_LIMIT_OTP_VERIFY_ATTEMPTS}
      - RATE_LIMIT_PASSWORD_RESET_ATTEMPTS=${RATE_LIMIT_PASSWORD_RESET_ATTEMPTS}
      - RATE_LIMIT_REGISTRATION_ATTEMPTS=${RATE_LIMIT_REGISTRATION_ATTEMPTS}
      
      # Storage Configuration
      - UPLOAD_PATH=${UPLOAD_PATH}
      - MAX_FILE_SIZE=${MAX_FILE_SIZE}
      
      # GCP Configuration
      - GCP_FIREBASE_SERVICE_ACCOUNT=${GCP_FIREBASE_SERVICE_ACCOUNT}
      
      # JVM Configuration
      - JAVA_OPTS=${JAVA_OPTS}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - cloudsuites-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health || true"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

networks:
  cloudsuites-network:
    driver: bridge

volumes:
  pg_data:
  redis_data: