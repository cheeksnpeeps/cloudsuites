name: CloudSuites CI/CD Pipeline

on:
  push:
    branches: [ main, develop, 'feat/**' ]
  pull_request:
    branches: [ main, develop ]

# Disable automatic dependency submission entirely
permissions:
  contents: read

# Override GitHub's automatic dependency submission
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  # Force disable dependency graph submission
  DEPENDENCY_GRAPH_ENABLED: false
  MAVEN_OPTS: "-Dmaven.repo.local=$HOME/.m2/repository"

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        java-version: [21]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        # Ensure complete checkout to avoid missing files
        fetch-depth: 0
        
    - name: Pre-setup Maven settings workaround
      run: |
        echo "=== Pre-setup: Creating Maven settings at expected GitHub location ==="
        # GitHub's automatic dependency submission expects settings at a specific path
        # We need to create this BEFORE any other actions run
        EXPECTED_PATH="/home/runner/work/cloudsuites/cloudsuites"
        EXPECTED_SETTINGS="/home/runner/work/cloudsuites/cloudsuites/.mvn/settings.xml"
        
        echo "Current working directory: $(pwd)"
        echo "Expected path: $EXPECTED_PATH"
        echo "Expected settings: $EXPECTED_SETTINGS"
        
        # Create the directory structure
        sudo mkdir -p "$EXPECTED_PATH/.mvn"
        
        # Copy our settings file to the expected location
        if [ -f ".mvn/settings.xml" ]; then
          sudo cp ".mvn/settings.xml" "$EXPECTED_SETTINGS"
          echo "Settings file copied to expected location ✓"
        else
          echo "WARNING: Local settings file not found, will create minimal one"
          cat > /tmp/minimal_settings.xml << 'EOF'
        <?xml version="1.0" encoding="UTF-8"?>
        <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
                  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                  xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd">
          <repositories>
            <repository>
              <id>central</id>
              <url>https://repo1.maven.org/maven2</url>
            </repository>
          </repositories>
        </settings>
        EOF
          sudo cp /tmp/minimal_settings.xml "$EXPECTED_SETTINGS"
        fi
        
        echo "Verifying settings file at expected location:"
        ls -la "$EXPECTED_SETTINGS"
        cat "$EXPECTED_SETTINGS" | head -5
        
        # Set the Maven settings path for all subsequent steps
        # Use the expected location as priority since we just created it
        if [ -f "/home/runner/work/cloudsuites/cloudsuites/.mvn/settings.xml" ]; then
          MAVEN_SETTINGS_PATH="/home/runner/work/cloudsuites/cloudsuites/.mvn/settings.xml"
          echo "Using expected GitHub location for Maven settings"
        elif [ -f "$(pwd)/.mvn/settings.xml" ]; then
          MAVEN_SETTINGS_PATH="$(pwd)/.mvn/settings.xml"
          echo "Using PWD location for Maven settings"
        elif [ -f "$GITHUB_WORKSPACE/.mvn/settings.xml" ]; then
          MAVEN_SETTINGS_PATH="$GITHUB_WORKSPACE/.mvn/settings.xml"
          echo "Using WORKSPACE location for Maven settings"
        else
          MAVEN_SETTINGS_PATH=".mvn/settings.xml"
          echo "Using relative location for Maven settings"
        fi
        
        echo "MAVEN_SETTINGS_PATH=$MAVEN_SETTINGS_PATH" >> $GITHUB_ENV
        echo "Maven settings path set to: $MAVEN_SETTINGS_PATH"
        
        # Verify the path was set correctly
        echo "Verifying final path selection:"
        echo "Selected path: $MAVEN_SETTINGS_PATH"
        echo "File exists at selected path: $(test -f "$MAVEN_SETTINGS_PATH" && echo 'YES' || echo 'NO')"
        
    - name: Verify Maven wrapper and settings
      run: |
        echo "=== Verifying Maven wrapper existence ==="
        echo "Current working directory: $(pwd)"
        echo "Full working directory path: $(readlink -f .)"
        if [ ! -f ./mvnw ]; then
          echo "ERROR: Maven wrapper not found!"
          echo "Contents of current directory:"
          ls -la
          exit 1
        fi
        echo "Maven wrapper found ✓"
        
        echo "=== Verifying .mvn/settings.xml ==="
        if [ ! -f .mvn/settings.xml ]; then
          echo "ERROR: Maven settings file not found!"
          echo "Contents of .mvn directory:"
          ls -la .mvn/ || echo ".mvn directory does not exist"
          echo "Contents of current directory:"
          ls -la
          exit 1
        fi
        echo "Maven settings file found ✓"
        
        echo "=== GitHub Actions Workspace Environment ==="
        echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
        echo "PWD: $(pwd)"
        echo "Runner home: $HOME"
        echo "Runner workspace: $RUNNER_WORKSPACE"
        
        echo "=== Creating workaround for duplicate path issue ==="
        # GitHub Actions seems to expect settings at /home/runner/work/cloudsuites/cloudsuites/.mvn/settings.xml
        # Let's create the expected directory structure if it doesn't exist
        EXPECTED_PATH="/home/runner/work/cloudsuites/cloudsuites"
        if [ ! -d "$EXPECTED_PATH" ]; then
          echo "Creating expected directory structure: $EXPECTED_PATH"
          sudo mkdir -p "$EXPECTED_PATH"
          sudo ln -sf "$(pwd)" "$EXPECTED_PATH"
        fi
        
        # Also ensure the settings file exists at the expected location
        EXPECTED_SETTINGS="/home/runner/work/cloudsuites/cloudsuites/.mvn/settings.xml"
        if [ ! -f "$EXPECTED_SETTINGS" ] && [ -f ".mvn/settings.xml" ]; then
          echo "Creating symbolic link for settings file"
          sudo mkdir -p "$(dirname "$EXPECTED_SETTINGS")"
          sudo ln -sf "$(pwd)/.mvn/settings.xml" "$EXPECTED_SETTINGS"
        fi
        
        echo "=== Full path information ==="
        echo "Maven wrapper path: $(readlink -f ./mvnw)"
        echo "Settings file path: $(readlink -f .mvn/settings.xml)"
        echo "Expected settings path: $EXPECTED_SETTINGS"
        echo "Expected settings exists: $(test -f "$EXPECTED_SETTINGS" && echo 'YES' || echo 'NO')"
        
        echo "=== Current working directory ==="
        pwd
        echo "=== Directory contents ==="
        ls -la
        echo "=== .mvn directory contents ==="
        ls -la .mvn/
      
    - name: Make Maven wrapper executable
      run: chmod +x ./mvnw
      
    - name: Test Maven wrapper execution
      run: |
        echo "=== Testing Maven wrapper execution ==="
        ./mvnw --version
        echo "Maven wrapper execution successful ✓"
        echo "=== Testing settings file access ==="
        echo "Using Maven settings from: $MAVEN_SETTINGS_PATH"
        
        if [ -f "$MAVEN_SETTINGS_PATH" ]; then
          echo "Settings file accessible ✓"
          ./mvnw -s "$MAVEN_SETTINGS_PATH" help:effective-settings | head -10
        else
          echo "ERROR: Settings file not accessible at $MAVEN_SETTINGS_PATH"
          echo "Available files:"
          find $GITHUB_WORKSPACE -name "*.xml" 2>/dev/null || echo "No XML files found"
          exit 1
        fi
      
    - name: Set up JDK ${{ matrix.java-version }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ matrix.java-version }}
        distribution: 'temurin'
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        registry-url: 'https://registry.npmjs.org'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Debug working directory and files
      run: |
        pwd
        ls -la
        ls -la .mvn/
        cat .mvn/settings.xml | head -5
        echo "=== Full path verification ==="
        echo "Working directory: $(pwd)"
        echo "Settings file full path: $(readlink -f .mvn/settings.xml)"
        echo "Maven wrapper full path: $(readlink -f ./mvnw)"
        echo "=== GitHub Actions workspace structure ==="
        echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
        echo "Runner workspace: $(dirname $(pwd))"
        ls -la $(dirname $(pwd))
        echo "=== Checking for nested directories ==="
        find $GITHUB_WORKSPACE -name "settings.xml" -type f 2>/dev/null || echo "No settings.xml found in workspace"
        find $GITHUB_WORKSPACE -name "mvnw" -type f 2>/dev/null || echo "No mvnw found in workspace"
        
    - name: Validate Maven project structure
      run: |
        echo "=== Maven validation with simplified path strategy ==="
        echo "Current directory: $(pwd)"
        echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
        echo "Maven settings path: $MAVEN_SETTINGS_PATH"
        echo "Settings file exists: $(test -f "$MAVEN_SETTINGS_PATH" && echo 'YES' || echo 'NO')"
        echo "Maven wrapper exists: $(test -f ./mvnw && echo 'YES' || echo 'NO')"
        
        if [ ! -f "$MAVEN_SETTINGS_PATH" ]; then
          echo "ERROR: Settings file not found at $MAVEN_SETTINGS_PATH"
          exit 1
        fi
        
        echo "Attempting Maven validation..."
        ./mvnw -s "$MAVEN_SETTINGS_PATH" validate -Dfrontend.skip=true
      
    - name: Compile project (skip frontend for now)
      run: |
        echo "Using Maven settings: $MAVEN_SETTINGS_PATH"
        ./mvnw -s "$MAVEN_SETTINGS_PATH" compile -Dfrontend.skip=true
      
    - name: Run unit tests
      run: |
        echo "Using Maven settings: $MAVEN_SETTINGS_PATH"
        ./mvnw -s "$MAVEN_SETTINGS_PATH" test -Dfrontend.skip=true
      
    - name: Run integration tests
      run: |
        echo "Using Maven settings: $MAVEN_SETTINGS_PATH"
        ./mvnw -s "$MAVEN_SETTINGS_PATH" verify -P integration-tests -DskipTests=false -Dfrontend.skip=true
      continue-on-error: true
      
    - name: Generate test reports
      run: |
        echo "=== Generate test reports - Debug Maven Settings ==="
        echo "MAVEN_SETTINGS_PATH environment variable: '$MAVEN_SETTINGS_PATH'"
        echo "Length of MAVEN_SETTINGS_PATH: ${#MAVEN_SETTINGS_PATH}"
        echo "File exists check: $(test -f "$MAVEN_SETTINGS_PATH" && echo 'YES' || echo 'NO')"
        
        if [ -z "$MAVEN_SETTINGS_PATH" ]; then
          echo "ERROR: MAVEN_SETTINGS_PATH is empty!"
          echo "Fallback to expected location..."
          MAVEN_SETTINGS_PATH="/home/runner/work/cloudsuites/cloudsuites/.mvn/settings.xml"
        fi
        
        echo "Final Maven settings path: '$MAVEN_SETTINGS_PATH'"
        echo "Final file check: $(test -f "$MAVEN_SETTINGS_PATH" && echo 'YES' || echo 'NO')"
        
        if [ ! -f "$MAVEN_SETTINGS_PATH" ]; then
          echo "ERROR: Settings file still not found!"
          echo "Available settings files:"
          find /home/runner/work -name "settings.xml" -type f 2>/dev/null || echo "No settings.xml found"
          exit 1
        fi
        
        echo "Using Maven settings: $MAVEN_SETTINGS_PATH"
        ./mvnw -s "$MAVEN_SETTINGS_PATH" jacoco:report -Dfrontend.skip=true
      if: always()
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-java-${{ matrix.java-version }}
        path: |
          **/target/surefire-reports/
          **/target/failsafe-reports/
          **/target/site/jacoco/
          
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Pre-setup Maven settings workaround
      run: |
        echo "=== Pre-setup: Creating Maven settings at expected GitHub location ==="
        EXPECTED_PATH="/home/runner/work/cloudsuites/cloudsuites"
        EXPECTED_SETTINGS="/home/runner/work/cloudsuites/cloudsuites/.mvn/settings.xml"
        
        # Create the directory structure
        sudo mkdir -p "$EXPECTED_PATH/.mvn"
        
        # Copy our settings file to the expected location
        if [ -f ".mvn/settings.xml" ]; then
          sudo cp ".mvn/settings.xml" "$EXPECTED_SETTINGS"
          echo "Settings file copied to expected location ✓"
        else
          echo "WARNING: Local settings file not found, will create minimal one"
          cat > /tmp/minimal_settings.xml << 'EOF'
        <?xml version="1.0" encoding="UTF-8"?>
        <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
                  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                  xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd">
          <repositories>
            <repository>
              <id>central</id>
              <url>https://repo1.maven.org/maven2</url>
            </repository>
          </repositories>
        </settings>
        EOF
          sudo cp /tmp/minimal_settings.xml "$EXPECTED_SETTINGS"
        fi
        
        # Set the Maven settings path for all subsequent steps
        EXPECTED_SETTINGS="/home/runner/work/cloudsuites/cloudsuites/.mvn/settings.xml"
        PWD_SETTINGS="$(pwd)/.mvn/settings.xml"
        WORKSPACE_SETTINGS="$GITHUB_WORKSPACE/.mvn/settings.xml"
        
        if [ -f "$EXPECTED_SETTINGS" ]; then
          MAVEN_SETTINGS_PATH="$EXPECTED_SETTINGS"
        elif [ -f "$PWD_SETTINGS" ]; then
          MAVEN_SETTINGS_PATH="$PWD_SETTINGS"
        elif [ -f "$WORKSPACE_SETTINGS" ]; then
          MAVEN_SETTINGS_PATH="$WORKSPACE_SETTINGS"
        else
          MAVEN_SETTINGS_PATH=".mvn/settings.xml"
        fi
        
        echo "MAVEN_SETTINGS_PATH=$MAVEN_SETTINGS_PATH" >> $GITHUB_ENV
        echo "Maven settings path set to: $MAVEN_SETTINGS_PATH"
      
    - name: Verify Maven wrapper and settings
      run: |
        echo "=== Verifying Maven wrapper existence ==="
        if [ ! -f ./mvnw ]; then
          echo "ERROR: Maven wrapper not found!"
          exit 1
        fi
        echo "Maven wrapper found ✓"
        
        echo "=== Verifying Maven settings ==="
        echo "Maven settings path: $MAVEN_SETTINGS_PATH"
        if [ ! -f "$MAVEN_SETTINGS_PATH" ]; then
          echo "ERROR: Maven settings file not found at $MAVEN_SETTINGS_PATH!"
          exit 1
        fi
        echo "Maven settings file found ✓"
      
    - name: Make Maven wrapper executable
      run: chmod +x ./mvnw
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Debug working directory and files
      run: |
        pwd
        ls -la
        ls -la .mvn/
        
    - name: Run OWASP Dependency Check
      run: |
        echo "Using Maven settings: $MAVEN_SETTINGS_PATH"
        ./mvnw -s "$MAVEN_SETTINGS_PATH" org.owasp:dependency-check-maven:check
      
    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results
        path: target/dependency-check-report.html

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Pre-setup Maven settings workaround
      run: |
        echo "=== Pre-setup: Creating Maven settings at expected GitHub location ==="
        EXPECTED_PATH="/home/runner/work/cloudsuites/cloudsuites"
        EXPECTED_SETTINGS="/home/runner/work/cloudsuites/cloudsuites/.mvn/settings.xml"
        
        # Create the directory structure
        sudo mkdir -p "$EXPECTED_PATH/.mvn"
        
        # Copy our settings file to the expected location
        if [ -f ".mvn/settings.xml" ]; then
          sudo cp ".mvn/settings.xml" "$EXPECTED_SETTINGS"
          echo "Settings file copied to expected location ✓"
        else
          echo "WARNING: Local settings file not found, will create minimal one"
          cat > /tmp/minimal_settings.xml << 'EOF'
        <?xml version="1.0" encoding="UTF-8"?>
        <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
                  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                  xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd">
          <repositories>
            <repository>
              <id>central</id>
              <url>https://repo1.maven.org/maven2</url>
            </repository>
          </repositories>
        </settings>
        EOF
          sudo cp /tmp/minimal_settings.xml "$EXPECTED_SETTINGS"
        fi
        
        # Set the Maven settings path for all subsequent steps
        EXPECTED_SETTINGS="/home/runner/work/cloudsuites/cloudsuites/.mvn/settings.xml"
        PWD_SETTINGS="$(pwd)/.mvn/settings.xml"
        WORKSPACE_SETTINGS="$GITHUB_WORKSPACE/.mvn/settings.xml"
        
        if [ -f "$EXPECTED_SETTINGS" ]; then
          MAVEN_SETTINGS_PATH="$EXPECTED_SETTINGS"
        elif [ -f "$PWD_SETTINGS" ]; then
          MAVEN_SETTINGS_PATH="$PWD_SETTINGS"
        elif [ -f "$WORKSPACE_SETTINGS" ]; then
          MAVEN_SETTINGS_PATH="$WORKSPACE_SETTINGS"
        else
          MAVEN_SETTINGS_PATH=".mvn/settings.xml"
        fi
        
        echo "MAVEN_SETTINGS_PATH=$MAVEN_SETTINGS_PATH" >> $GITHUB_ENV
        echo "Maven settings path set to: $MAVEN_SETTINGS_PATH"
      
    - name: Verify Maven wrapper and settings
      run: |
        echo "=== Verifying Maven wrapper existence ==="
        if [ ! -f ./mvnw ]; then
          echo "ERROR: Maven wrapper not found!"
          exit 1
        fi
        echo "Maven wrapper found ✓"
        
        echo "=== Verifying Maven settings ==="
        echo "Maven settings path: $MAVEN_SETTINGS_PATH"
        if [ ! -f "$MAVEN_SETTINGS_PATH" ]; then
          echo "ERROR: Maven settings file not found at $MAVEN_SETTINGS_PATH!"
          exit 1
        fi
        echo "Maven settings file found ✓"
      
    - name: Make Maven wrapper executable
      run: chmod +x ./mvnw
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: Build application
      run: |
        echo "Using Maven settings: $MAVEN_SETTINGS_PATH"
        ./mvnw -s "$MAVEN_SETTINGS_PATH" clean package -DskipTests -Dfrontend.skip=true
      
    - name: Build Docker image
      run: docker build -t cloudsuites:${{ github.sha }} .
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: application-jar
        path: |
          **/target/*.jar
          !**/target/*-sources.jar
          !**/target/*-javadoc.jar

  authentication-tests:
    name: Authentication Feature Tests
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Pre-setup Maven settings workaround
      run: |
        echo "=== Pre-setup: Creating Maven settings at expected GitHub location ==="
        EXPECTED_PATH="/home/runner/work/cloudsuites/cloudsuites"
        EXPECTED_SETTINGS="/home/runner/work/cloudsuites/cloudsuites/.mvn/settings.xml"
        
        # Create the directory structure
        sudo mkdir -p "$EXPECTED_PATH/.mvn"
        
        # Copy our settings file to the expected location
        if [ -f ".mvn/settings.xml" ]; then
          sudo cp ".mvn/settings.xml" "$EXPECTED_SETTINGS"
          echo "Settings file copied to expected location ✓"
        else
          echo "WARNING: Local settings file not found, will create minimal one"
          cat > /tmp/minimal_settings.xml << 'EOF'
        <?xml version="1.0" encoding="UTF-8"?>
        <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
                  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                  xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd">
          <repositories>
            <repository>
              <id>central</id>
              <url>https://repo1.maven.org/maven2</url>
            </repository>
          </repositories>
        </settings>
        EOF
          sudo cp /tmp/minimal_settings.xml "$EXPECTED_SETTINGS"
        fi
        
        # Set the Maven settings path for all subsequent steps
        EXPECTED_SETTINGS="/home/runner/work/cloudsuites/cloudsuites/.mvn/settings.xml"
        PWD_SETTINGS="$(pwd)/.mvn/settings.xml"
        WORKSPACE_SETTINGS="$GITHUB_WORKSPACE/.mvn/settings.xml"
        
        if [ -f "$EXPECTED_SETTINGS" ]; then
          MAVEN_SETTINGS_PATH="$EXPECTED_SETTINGS"
        elif [ -f "$PWD_SETTINGS" ]; then
          MAVEN_SETTINGS_PATH="$PWD_SETTINGS"
        elif [ -f "$WORKSPACE_SETTINGS" ]; then
          MAVEN_SETTINGS_PATH="$WORKSPACE_SETTINGS"
        else
          MAVEN_SETTINGS_PATH=".mvn/settings.xml"
        fi
        
        echo "MAVEN_SETTINGS_PATH=$MAVEN_SETTINGS_PATH" >> $GITHUB_ENV
        echo "Maven settings path set to: $MAVEN_SETTINGS_PATH"
      
    - name: Verify Maven wrapper and settings
      run: |
        echo "=== Verifying Maven wrapper existence ==="
        if [ ! -f ./mvnw ]; then
          echo "ERROR: Maven wrapper not found!"
          exit 1
        fi
        echo "Maven wrapper found ✓"
        
        echo "=== Verifying Maven settings ==="
        echo "Maven settings path: $MAVEN_SETTINGS_PATH"
        if [ ! -f "$MAVEN_SETTINGS_PATH" ]; then
          echo "ERROR: Maven settings file not found at $MAVEN_SETTINGS_PATH!"
          exit 1
        fi
        echo "Maven settings file found ✓"
      
    - name: Make Maven wrapper executable
      run: chmod +x ./mvnw
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: Run JWT Tests
      run: |
        echo "Using Maven settings: $MAVEN_SETTINGS_PATH"
        ./mvnw -s "$MAVEN_SETTINGS_PATH" test -f modules/identity-module -Dtest=Jwt*Test
      
    - name: Run Authentication Integration Tests
      run: |
        echo "Using Maven settings: $MAVEN_SETTINGS_PATH"
        ./mvnw -s "$MAVEN_SETTINGS_PATH" test -f modules/identity-module -Dtest=*IntegrationTest
      
    - name: Validate Test Coverage (85% minimum)
      run: |
        echo "Using Maven settings: $MAVEN_SETTINGS_PATH"
        ./mvnw -s "$MAVEN_SETTINGS_PATH" jacoco:report -f modules/identity-module
        ./mvnw -s "$MAVEN_SETTINGS_PATH" jacoco:check -f modules/identity-module -Djacoco.haltOnFailure=true
